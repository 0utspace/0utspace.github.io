{"version":3,"sources":["componets/search-panel/search-panel.js","componets/app-info/app-info.js","componets/app-filter/app-filter.js","componets/employees-list-item/employees-list-item.js","componets/employees-list/employees-list.js","componets/employees-add-form/employees-add-form.js","componets/app/app.js","reportWebVitals.js","index.js"],"names":["SearchPanel","props","onUpdateSearch","event","term","target","value","setState","state","type","className","placeholder","this","onChange","Component","AppInfo","increased","employees","AppFilter","buttons","name","label","map","clazz","filter","onClick","onFilterSelect","EmployeesListItem","salary","onDelete","onToggleProp","classNames","increase","rise","defaultValue","EmployeesList","data","elements","item","id","itemProps","currentTarget","getAttribute","EmployeesAddForm","OnValueChange","onSubmit","preventDefault","length","onAdd","App","addItem","newItem","maxId","deleteItem","prop","searchEmp","items","indexOf","filterPost","visibleData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0504a414.chunk.js","sourcesContent":["import {Component} from \"react\";\r\n\r\nimport \"./search-panel.css\";\r\n\r\n\r\nclass SearchPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: \"\"\r\n        }\r\n    }\r\n\r\n    onUpdateSearch = (event) => {\r\n        const term = event.target.value;//в змінну помістили поточне значення форми (введене слово)\r\n\r\n        //міняєм в ЛОКАЛЬНОМУ (ВИЩЕ) об'єкті state значення ключа term (поки шо воно пусте) на значення введене в форму\r\n        // (const term)\r\n        this.setState({\r\n            term: term\r\n        })\r\n\r\n        this.props.onUpdateSearch(term); //тут ми викликає одноіменну, але ГЛОБАЛЬНУ функцію - з файлу app.js\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                className=\"form-control search-input\"\r\n                placeholder=\"Знайти працівника\"\r\n                value={this.state.term}\r\n                onChange={this.onUpdateSearch}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchPanel;","import \"./app-info.css\";\r\n\r\n\r\nconst AppInfo = ({increased, employees}) => {\r\n    return (\r\n        <div className=\"app-info\">\r\n            <h1>Облік працівників в компанії N</h1>\r\n            <h2>Загальне число працівників: {employees}</h2>\r\n            <h2>Премію отримають: {increased}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppInfo;","\r\nimport \"./app-filter.css\"\r\n\r\nconst AppFilter = (props) => {\r\n\r\n    //створимо масив з кнопками\r\n    const buttonsData = [\r\n        {name: \"all\", label: \"Всі працівники\"},\r\n        {name: \"rise\", label: \"На підвищення\"},\r\n        {name: \"moreThan1000\", label: \"З/П більше 1000$\"},\r\n    ];\r\n\r\n    const buttons = buttonsData.map(({name, label}) => {\r\n        const active = props.filter === name; //перевіряємо значення фільтра із змінною name. Якшо співпадають, то запишеться true.\r\n        // True запишеться один раз - тому що метод map перебере всі об'єкти масива і знайде відповідну збіжність\r\n\r\n        const clazz = active ? \"btn btn-light\" : \"btn-outline-light\"; //якшо active - true, то в змінну clazz запишемо\r\n        // перший css клас, а якшо false, то другий клас\r\n        return(\r\n            <button\r\n                className={`btn ${clazz}`}\r\n                type=\"button\"\r\n                key={name}\r\n                onClick={() => props.onFilterSelect(name)}>\r\n                {label}\r\n            </button>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"btn-group\">\r\n            {buttons}\r\n            {/*<button*/}\r\n            {/*    className=\"btn btn-light\"*/}\r\n            {/*    type=\"button\">*/}\r\n            {/*        Всі працівники*/}\r\n            {/*</button>*/}\r\n            {/*<button*/}\r\n            {/*    className=\"btn btn-outline-light\"*/}\r\n            {/*    type=\"button\">*/}\r\n            {/*    На підвищення*/}\r\n            {/*</button>*/}\r\n            {/*<button*/}\r\n            {/*    className=\"btn btn-outline-light\"*/}\r\n            {/*    type=\"button\">*/}\r\n            {/*    З/П більше 1000$*/}\r\n            {/*</button>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppFilter;","\r\nimport './employees-list-item.css';\r\n\r\nconst EmployeesListItem = (props) => {\r\n\r\n        const {name, salary, onDelete, onToggleProp, increase, rise} = props;\r\n\r\n        //перевіряємо чи ключ increase має значення true - якшо так, то додаємо до нашого класу додатковий клас, що\r\n        // перефарбує поле з працівником у заданий колів\r\n        let classNames = \"list-group-item d-flex justify-content-between\";\r\n        if (increase){\r\n            classNames += \" increase\"\r\n        }\r\n\r\n        if (rise){\r\n            classNames += \" like\"\r\n        }\r\n\r\n        return (\r\n\r\n            <li className={classNames}>\r\n                <span className=\"list-group-item-label\"\r\n                      onClick={onToggleProp}\r\n                      data-toggle=\"rise\">{name}</span>\r\n                <input type=\"text\" className=\"list-group-item-input\" defaultValue={salary + \"$\"}/>\r\n                <div className='d-flex justify-content-center align-items-center'>\r\n                    <button type=\"button\"\r\n                            className=\"btn-cookie btn-sm \"\r\n                            onClick={onToggleProp}\r\n                            data-toggle=\"increase\">\r\n                        <i className=\"fas fa-cookie\"></i>\r\n                    </button>\r\n\r\n                    <button type=\"button\"\r\n                            className=\"btn-trash btn-sm \"\r\n                            onClick={onDelete}>\r\n                        <i className=\"fas fa-trash\"></i>\r\n                    </button>\r\n                    <i className=\"fas fa-star\"></i>\r\n                </div>\r\n            </li>\r\n        )\r\n}\r\n\r\nexport default EmployeesListItem;","import EmployeesListItem from \"../employees-list-item/employees-list-item\";\r\nimport \"./employees-list.css\";\r\n\r\n//в компоненту передаємо data - масив з об'єктами наповнених інфо про працівників\r\n//так як в аргумент компоненти приходить одразу об'єкт, то методом деструктуризації ми передаємо в аргумент тільки сам\r\n// ключ data із значенням  - масивом об'єктів\r\nconst EmployeesList = ({data, onDelete, onToggleProp}) => {\r\n\r\n    //перетворюємо масив об'єктів на масив ЕЛЕМЕНТІВ\r\n    const elements = data.map(item => {\r\n\r\n        //об'єкт item деструктуризуємо на змінну id та группу змінніних itemProps\r\n        const {id, ...itemProps} = item;\r\n        return(\r\n            <EmployeesListItem\r\n                key={id}\r\n                {...itemProps}\r\n\r\n                //велике пояснення - в файлі app.js ми викликаємо компоненту Employees-list з аргументами, один з яких\r\n                // це функція onDelete (виводить в консоль id)\r\n                //далі, тут ми методом деструктуризації витягуємо цю функцію з об'єкту props і використовуємо її при\r\n                // виклику вкладеної компоненти \"EmployeesListItem\", яка своїм ПРОПСОМ має функцію, яка викликає нашу ж\r\n                // передану функцію з файла app.js компоненти Employees-list\r\n                // id - яке виводить функція onDelete(id) - це данні з бази данних (зараз просто об'єкт в файлі app.js)\r\n                onDelete={() => onDelete(id)}\r\n                onToggleProp={(event) => onToggleProp(id, event.currentTarget.getAttribute(\"data-toggle\"))}/>\r\n                //стрічка зверху означає - беремо значення дата-атрибуту елемента, на якому спрацьовує відслідковувач подій\r\n        )\r\n    })\r\n\r\n    //методом деструктуризації передаємо сюди всі елементи масива - тобто елементи з налаштованою компонентою\r\n    return (\r\n        <ul className=\"app-list list-group\">\r\n            {elements}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default EmployeesList;","import {Component} from \"react\";\r\n// import './employees-add-form.css';\r\nimport \"./employees-add-form.scss\";\r\n\r\n\r\nclass EmployeesAddForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            salary: \"\",\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    OnValueChange = (event) => {\r\n        this.setState({\r\n            //через квадратні дужки звертаємось до ОТРИБУТА name інпутів\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    //метод відміняє стандартну поведінку браузера, запускає переданий метод, що створює і додає об'єкт в масив. В кінці\r\n    // ощищується форма\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.name.length < 3 && !this.state.salary) return; //перевірка - якшо пусті поля - вийти.\r\n        this.props.onAdd(this.state.name, this.state.salary);\r\n        this.setState({\r\n            name: \"\",\r\n            salary: \"\"\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {name, salary} = this.state;\r\n\r\n        return (\r\n            <div className=\"app-add-form\">\r\n                <h3>Добавьте нового сотрудника</h3>\r\n                <form\r\n                    className=\"add-form d-flex\"\r\n                    onSubmit={this.onSubmit}>\r\n                    <input type=\"text\"\r\n                           className=\"form-control new-post-label\"\r\n                           placeholder=\"Как его зовут?\"\r\n                           onChange={this.OnValueChange}\r\n                           name=\"name\"\r\n                           value={name}/>\r\n                    <input type=\"number\"\r\n                           className=\"form-control new-post-label\"\r\n                           placeholder=\"З/П в $?\"\r\n                           onChange={this.OnValueChange}\r\n                           name=\"salary\"\r\n                           value={salary}/>\r\n\r\n                    <button type=\"submit\"\r\n                            className=\"btn btn-outline-light\">Добавить</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeesAddForm;","import {Component} from \"react\";\r\n\r\nimport SearchPanel from \"../search-panel/search-panel\";\r\nimport AppInfo from \"../app-info/app-info\";\r\nimport AppFilter from \"../app-filter/app-filter\";\r\nimport EmployeesList from \"../employees-list/employees-list\";\r\nimport EmployeesAddForm from \"../employees-add-form/employees-add-form\";\r\nimport \"./app.css\";\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n             data: [\r\n                {name: \"Дмитрук І.\", salary: 600, increase: false, rise: true, id: 1},\r\n                {name: \"Кононенко Д.\", salary: 560, increase: true, rise: false, id: 2},\r\n                {name: \"Синиця І.\", salary: 800, increase: false, rise: false, id: 3}\r\n            ],\r\n            term: \"\", //пустра стрічка - сюди будуть записуватись данні введені в стрічку пошуку\r\n            filter: \"all\" //значення, яке буде записуватись в залежності від обраного фільтру\r\n        }\r\n        this.maxId = 4 //значення буде використовуватись для id кожного об'єкта\r\n    }\r\n\r\n    //метод для створення об'єкта на основі введених данних та додавання його в масив\r\n    addItem = (name, salary) => {\r\n        const newItem = {\r\n            name,\r\n            salary,\r\n            increase: false,\r\n            rise: false,\r\n            id: this.maxId++\r\n        }\r\n        this.setState(({data}) => {\r\n            const newArray = [...data, newItem]\r\n            return {\r\n                data: newArray\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    deleteItem = (id) => {\r\n        this.setState(({data}) => {\r\n\r\n            //метод findIndex перевіряє кожен елемент масива і повертає ІНДЕКС того елемента, на якому перевірка дала - true\r\n            //тобто зараз ми перевіряємо чи збігається значення ключа id вкладеного в масив об'єкта з його id при кліку\r\n            // - і якшо так, то цей елемент в результаті ми будемо видаляти. Тобто той працівник на якого ми клікнемо,\r\n            // того і будем видаляти\r\n            // const index = data.findIndex(elem => elem.id === id)\r\n            // console.log(index)\r\n\r\n            return {\r\n                data: data.filter(item => item.id !== id)\r\n            }\r\n        })\r\n    }\r\n\r\n    onToggleProp = (id, prop) => {\r\n        // this.setState(({data}) => {\r\n            // const index = data.findIndex(element => element.id === id); //знайшли індекс елемента, по якому клікнули\r\n            //\r\n            // const old = data[index];//старий об'єкт, по якому ми клікнули\r\n            // const newItem = {...old, increase: !old.increase};//створили новий об'єкт, в який розвернули всі ключі\r\n            // // старого об'єкта і після вписали ключ increase з новим значенням - він замінить increase з старого об'єкта\r\n            //\r\n            // const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];//створюємо новий масив з об'єктами,\r\n            // // який буде містити всі старі об'єкти до зміненого, далі змінений об'єкт, а потім решту старих\r\n            //\r\n            // return {\r\n            //     data: newArr\r\n            // }\r\n        // })\r\n\r\n        this.setState(({data}) => ({\r\n            data: data.map(item => {\r\n                if (item.id === id){ //на об'єкті, на який ми клікнули (id якого збігається з id об'єкта із масиву)\r\n                    return {...item, [prop]: !item[prop]}//замінити пару ключ-значення на протилежну (переключити)\r\n                }\r\n                return item;\r\n            })\r\n        }))\r\n    }\r\n\r\n    //Метод працює, але він повторюється з старим методом onToggleIncrease. Тому ми оптимізуємо 2 метода в один\r\n    // onToggleRise = (id) => {\r\n    //     this.setState(({data}) => ({\r\n    //         data: data.map(item => {\r\n    //             if (item.id === id){ //на об'єкті, на який ми клікнули (id якого збігається з id об'єкта із масиву)\r\n    //                 return {...item, rise: !item.rise}//замінити пару ключ-значення на протилежну (переключити)\r\n    //             }\r\n    //             return item;\r\n    //         })\r\n    //     }))\r\n    // }\r\n\r\n    //метод для фільтрації працівників по введеному слову. Item - об'єкт з масиву, Term - стрічка пошуку\r\n    searchEmp = (items, term) => {\r\n\r\n        //якшо введене слово пусте - менше одного символу - повернути весь масив\r\n        if (term.length < 1){\r\n            return items\r\n        }\r\n\r\n        //на основі вихідного масиву відфільтруємо новий масив\r\n        return items.filter(item => {\r\n            return item.name.indexOf(term) > -1 // який буде містити об'єкти, ключ name яких містить шукане слово\r\n        })\r\n\r\n    }\r\n\r\n    //метод приймає в себе стрічку (з поля пошуку) і змінює setState на відповідне значення\r\n    onUpdateSearch = (term) => {\r\n        this.setState({\r\n            term: term\r\n        })\r\n    }\r\n\r\n    filterPost = (items, filter) => {\r\n        switch (filter) {\r\n            case \"rise\":\r\n                return items.filter(item => item.rise);//створиться новий масив з об'єктів у яких ключ rise: true\r\n            case \"moreThan1000\":\r\n                return items.filter(item => item.salary > 1000);//створим масив з об'єктів у яких ключ salary > 1000\r\n            default:\r\n                return items\r\n        }\r\n    }\r\n\r\n    //в метод приходить якась стрічка (ім'я фільтру) і на це значення буде змінюватись об'єкт state\r\n    onFilterSelect = (filter) => {\r\n        this.setState({filter});\r\n    }\r\n\r\n    render() {\r\n\r\n        const {data, term, filter} = this.state;//витягли масив і змінну з об'єкту state\r\n        const employees = this.state.data.length; //к-сть працівників (об'єктів в масиві data)\r\n        const increased = this.state.data.filter(item => item.increase).length; //к-сть працівників, яким дадуть премію\r\n        const visibleData = this.filterPost(this.searchEmp(data, term), filter); //новий масив, що буде містити відфільтровані елементи\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <AppInfo employees={employees} increased={increased}/>\r\n\r\n                <div className=\"search-panel\">\r\n\r\n                    <SearchPanel onUpdateSearch={this.onUpdateSearch}/>\r\n                    <AppFilter filter={filter} onFilterSelect={this.onFilterSelect}/>\r\n                </div>\r\n\r\n                <EmployeesList\r\n                    data={visibleData}\r\n                    onDelete={this.deleteItem}\r\n                    onToggleProp={this.onToggleProp}\r\n                    />\r\n                <EmployeesAddForm onAdd={this.addItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./componets/app/app\";\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}